function [Y,Xf,Af] = petLength(X,~,~)
%PETLENGTH neural network simulation function.
%
% Generated by Neural Network Toolbox function genFunction, 10-Jul-2017 07:30:49.
% 
% [Y] = petLength(X,~,~) takes these arguments:
% 
%   X = 1xTS cell, 1 inputs over TS timsteps
%   Each X{1,ts} = 5xQ matrix, input #1 at timestep ts.
% 
% and returns:
%   Y = 1xTS cell of 1 outputs over TS timesteps.
%   Each Y{1,ts} = 1xQ matrix, output #1 at timestep ts.
% 
% where Q is number of samples (or series) and TS is the number of timesteps.

%#ok<*RPMT0>

  % ===== NEURAL NETWORK CONSTANTS =====
  
  % Input 1
  x1_step1_xoffset = [-16732.2745531114;-21423.2172954954;-16427.4461982787;-7305.88820790973;-3840.66361567175];
  x1_step1_gain = [3.35608794904094e-05;5.70733822099241e-05;7.10216242435988e-05;0.000110538553502269;0.000223802134481453];
  x1_step1_ymin = -1;
  
  % Layer 1
  b1 = [2.7372090494945493511;1.1431690345324940772;1.2666407936600698747];
  IW1_1 = [-2.8880621397487247215 1.7551066681946492221 -2.1587281211964612915 5.2216878961045694041 2.0060440370784213826;0.38295820261472601764 1.3695505932710385633 -0.38263867596525164005 0.81229025446023972457 0.024480379671766722138;4.3072917548206337557 1.8953828100238676591 0.46301079668729894223 -0.62370722102073461457 -0.27706829232326080081];
  
  % Layer 2
  b2 = [4.8480920670820877305;1.9542274867334712418;2.3424066451599001581;-1.8009625687965113983;-1.6476545197602592285;-3.0870534996333156563;3.0791893901587887861;3.5178180229944406854];
  LW2_1 = [0.27818880424843472898 -0.52751275680967535386 1.6211240612566055752;-1.7454346942500504891 0.52645927780530943352 -4.2405986867385063732;-1.5844139689111667035 3.1658114773934409314 -2.1822296060628376679;2.8777405463699210486 -3.3540396224719968288 2.5346867908587205065;1.4655132599469979926 -1.0615596116332737253 2.4503084837678881236;-1.4861360391676421422 0.98912876696774199026 -1.8185607571407220728;1.3080487490272738604 -2.1567901540667624438 2.2385485726274976237;2.3122147028801638413 -2.1823905186178862436 0.66466381730691059815];
  
  % Layer 3
  b3 = -0.7566219562980509572;
  LW3_2 = [-0.10568020083192566916 0.3657295188292669641 1.4856239687175611941 -0.73976902778941522332 1.2619228124359769261 0.24929087965826871032 0.85397157004034129901 -1.1901834385033378538];
  
  % Output 1
  y1_step1_ymin = -1;
  y1_step1_gain = 0.00113426588913134;
  y1_step1_xoffset = 443.8453333;
  
  % ===== SIMULATION ========
  
  % Format Input Arguments
  isCellX = iscell(X);
  if ~isCellX, X = {X}; end;
  
  % Dimensions
  TS = size(X,2); % timesteps
  if ~isempty(X)
    Q = size(X{1},2); % samples/series
  else
    Q = 0;
  end
  
  % Allocate Outputs
  Y = cell(1,TS);
  
  % Time loop
  for ts=1:TS
  
    % Input 1
    Xp1 = mapminmax_apply(X{1,ts},x1_step1_gain,x1_step1_xoffset,x1_step1_ymin);
    
    % Layer 1
    a1 = tansig_apply(repmat(b1,1,Q) + IW1_1*Xp1);
    
    % Layer 2
    a2 = tansig_apply(repmat(b2,1,Q) + LW2_1*a1);
    
    % Layer 3
    a3 = repmat(b3,1,Q) + LW3_2*a2;
    
    % Output 1
    Y{1,ts} = mapminmax_reverse(a3,y1_step1_gain,y1_step1_xoffset,y1_step1_ymin);
  end
  
  % Final Delay States
  Xf = cell(1,0);
  Af = cell(3,0);
  
  % Format Output Arguments
  if ~isCellX, Y = cell2mat(Y); end
end

% ===== MODULE FUNCTIONS ========

% Map Minimum and Maximum Input Processing Function
function y = mapminmax_apply(x,settings_gain,settings_xoffset,settings_ymin)
  y = bsxfun(@minus,x,settings_xoffset);
  y = bsxfun(@times,y,settings_gain);
  y = bsxfun(@plus,y,settings_ymin);
end

% Sigmoid Symmetric Transfer Function
function a = tansig_apply(n)
  a = 2 ./ (1 + exp(-2*n)) - 1;
end

% Map Minimum and Maximum Output Reverse-Processing Function
function x = mapminmax_reverse(y,settings_gain,settings_xoffset,settings_ymin)
  x = bsxfun(@minus,y,settings_ymin);
  x = bsxfun(@rdivide,x,settings_gain);
  x = bsxfun(@plus,x,settings_xoffset);
end

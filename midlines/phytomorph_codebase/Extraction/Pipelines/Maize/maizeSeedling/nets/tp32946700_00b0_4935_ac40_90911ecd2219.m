function [Y,Xf,Af] = tp32946700_00b0_4935_ac40_90911ecd2219(X,~,~)
%TP32946700_00B0_4935_AC40_90911ECD2219 neural network simulation function.
%
% Generated by Neural Network Toolbox function genFunction, 31-Aug-2017 14:03:41.
% 
% [Y] = tp32946700_00b0_4935_ac40_90911ecd2219(X,~,~) takes these arguments:
% 
%   X = 1xTS cell, 1 inputs over TS timsteps
%   Each X{1,ts} = 20xQ matrix, input #1 at timestep ts.
% 
% and returns:
%   Y = 1xTS cell of 1 outputs over TS timesteps.
%   Each Y{1,ts} = 1xQ matrix, output #1 at timestep ts.
% 
% where Q is number of samples (or series) and TS is the number of timesteps.

%#ok<*RPMT0>

  % ===== NEURAL NETWORK CONSTANTS =====
  
  % Input 1
  x1_step1_xoffset = [-5432.21511079256;-863.132365464489;-834.320338899994;-1563.74270708012;-690.442124301695;-440.923810847593;-781.659803211376;-311.516810675612;-659.850047510501;-416.874768568208;-250.644035779469;-272.098158795937;-389.737207411751;-200.812705665955;-235.257771107126;-287.447714627327;-270.705877196481;-189.900188905735;-178.529888662631;-167.395512111933];
  x1_step1_gain = [0.000193639844679507;0.000635136090067475;0.00107257204462677;0.000992521373387903;0.00140098678161598;0.00179249040902968;0.00152180852073822;0.00263160812648067;0.0019868610334328;0.00250748142155732;0.0045874332470695;0.00371176793861527;0.00296778207281854;0.0044891509337784;0.0036587901775508;0.00377014651183218;0.00363538636865122;0.00429258503045356;0.00587388837253276;0.00612684175841811];
  x1_step1_ymin = -1;
  
  % Layer 1
  b1 = [-1.481433941133322163;4.3370241929779682621;0.55462268627152677691];
  IW1_1 = [0.056919469475766135136 -0.8229313377570044441 0.1970451446409874352 -0.14651227212185002902 0.46311398109668483469 -0.65435029426609347958 -0.23806007951857710569 0.27976962128263799245 -0.36013488956191974655 0.16138044569439122244 0.29299644571070382337 0.54939481934803036101 0.38586530525763096389 -0.20309168725767759445 -0.3235698605642867709 -0.29118910063994907222 -0.28359716279016911056 -0.59017188499123462986 -0.77176472984966526525 0.13742219934056007502;4.7545711002621704466 3.7973555743828644182 3.1423237693796979286 -2.603015106764677622 -0.64567949547705294489 0.64414458631481574802 2.7622716322566489566 -0.15188403370695058303 -1.4116403347643688981 -2.5820227844758716351 -2.7796424802299317669 3.2551907738632603895 -6.4942922736054784494 1.3847563272206020457 -1.3129883866820795113 -1.452995518959104615 1.1988326814558341038 -2.072618882982191213 1.0678672063945584547 -1.598341139409864331;-3.8260523348034656266 3.4483541629592449063 -2.2188722131475548949 -0.37353346290152694698 -0.79577247060377676036 -0.66516453702011912874 1.3677761857693595537 0.37648504839039120817 0.90831810956622172082 0.52638382666647365316 -0.2369446697277014513 -0.38968379339932807115 -0.28466344700986384586 0.69755265741207950203 3.1943470307337396008 -0.049814699790265148938 -0.34552749149749195645 -1.6744513625183199412 0.30191964086556594138 0.51136210982796792557];
  
  % Layer 2
  b2 = -5.0436382990567585338;
  LW2_1 = [6.0698507130717782587 -8.6261120688363011055 -6.93973424826498686];
  
  % ===== SIMULATION ========
  
  % Format Input Arguments
  isCellX = iscell(X);
  if ~isCellX, X = {X}; end;
  
  % Dimensions
  TS = size(X,2); % timesteps
  if ~isempty(X)
    Q = size(X{1},2); % samples/series
  else
    Q = 0;
  end
  
  % Allocate Outputs
  Y = cell(1,TS);
  
  % Time loop
  for ts=1:TS
  
    % Input 1
    Xp1 = mapminmax_apply(X{1,ts},x1_step1_gain,x1_step1_xoffset,x1_step1_ymin);
    
    % Layer 1
    a1 = tansig_apply(repmat(b1,1,Q) + IW1_1*Xp1);
    
    % Layer 2
    a2 = logsig_apply(repmat(b2,1,Q) + LW2_1*a1);
    
    % Output 1
    Y{1,ts} = a2;
  end
  
  % Final Delay States
  Xf = cell(1,0);
  Af = cell(2,0);
  
  % Format Output Arguments
  if ~isCellX, Y = cell2mat(Y); end
end

% ===== MODULE FUNCTIONS ========

% Map Minimum and Maximum Input Processing Function
function y = mapminmax_apply(x,settings_gain,settings_xoffset,settings_ymin)
  y = bsxfun(@minus,x,settings_xoffset);
  y = bsxfun(@times,y,settings_gain);
  y = bsxfun(@plus,y,settings_ymin);
end

% Sigmoid Positive Transfer Function
function a = logsig_apply(n)
  a = 1 ./ (1 + exp(-n));
end

% Sigmoid Symmetric Transfer Function
function a = tansig_apply(n)
  a = 2 ./ (1 + exp(-2*n)) - 1;
end

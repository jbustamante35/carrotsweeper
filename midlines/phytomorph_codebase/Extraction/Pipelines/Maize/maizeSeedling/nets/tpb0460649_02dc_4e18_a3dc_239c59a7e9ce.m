function [Y,Xf,Af] = tpb0460649_02dc_4e18_a3dc_239c59a7e9ce(X,~,~)
%TPB0460649_02DC_4E18_A3DC_239C59A7E9CE neural network simulation function.
%
% Generated by Neural Network Toolbox function genFunction, 31-Aug-2017 13:36:02.
% 
% [Y] = tpb0460649_02dc_4e18_a3dc_239c59a7e9ce(X,~,~) takes these arguments:
% 
%   X = 1xTS cell, 1 inputs over TS timsteps
%   Each X{1,ts} = 20xQ matrix, input #1 at timestep ts.
% 
% and returns:
%   Y = 1xTS cell of 1 outputs over TS timesteps.
%   Each Y{1,ts} = 1xQ matrix, output #1 at timestep ts.
% 
% where Q is number of samples (or series) and TS is the number of timesteps.

%#ok<*RPMT0>

  % ===== NEURAL NETWORK CONSTANTS =====
  
  % Input 1
  x1_step1_xoffset = [-5432.21511079255;-863.132365464489;-1030.35626722576;-451.327248716545;-690.442124301702;-440.923810847594;-781.659803211371;-311.516810675616;-659.850047510508;-380.738319531123;-250.644035779525;-272.098158795952;-389.737207411695;-244.705841048788;-235.257771107121;-287.44771462753;-279.441974280405;-189.900188905717;-178.529888662644;-167.39551211196];
  x1_step1_gain = [0.000193639844679507;0.000635136090067476;0.00107257204462677;0.000992521373387899;0.00140098678161598;0.00179249040902968;0.00152180852073822;0.0026316081264806;0.00198686103343282;0.00250748142155724;0.0045874332470692;0.00371176793861496;0.00296778207281878;0.00448915093377836;0.0036587901775509;0.00377014651182924;0.00363538636865235;0.00429258503045442;0.00587388837253251;0.0061268417584171];
  x1_step1_ymin = -1;
  
  % Layer 1
  b1 = [0.8340427473535041436;1.887832420842692871;-0.61377787593475197081];
  IW1_1 = [-4.5475261931323816 0.47236030156013003589 2.3981674611637133765 2.0339733744882511068 -1.9979166730688320275 -1.6054605893911266801 1.6638824531455260747 0.85739041962066142588 1.5525338116010571898 -0.02558661760770791771 2.1978766038628143598 -1.9808460465405020035 3.3582798134777767096 1.3649444568365003416 0.29415007841304835479 -0.060309682030021877219 0.11510903881586510844 -0.90463759931694398553 -0.59473680921443816683 0.72979796569250776628;-3.6087329989354719473 -1.1088342479293198384 -0.79479454266930704698 0.92918265563597024492 2.1931135705121880264 1.1374961754255781265 -0.66877800136938592157 0.21779742495491136167 -3.1931915471181753219 2.6730418185055442315 -1.4705015386744053618 0.68921012555414806755 -2.07534079490158474 -0.99417856631025969261 0.18892311575702808168 0.44117473991994066163 -0.27033433472883056092 -1.4936046022605036221 0.40748949837274334174 -1.5445483283835093058;1.5161272214051977336 -3.6523458875522774036 -2.6143210154716349791 -2.3495245627096137397 2.7345743740544330436 1.0153629379758688511 -1.3053747768771677418 -0.41675863522637152103 -1.9804681957738123899 1.5259575237516886936 -1.0117670369079152515 0.75707677280882124116 -0.45285258817442025636 0.06359739719022620974 0.064910552074723640303 0.1294108841146059119 -0.77263201134041747942 -0.25173882648149653596 0.56831996458940359229 0.232308040290328921];
  
  % Layer 2
  b2 = -6.6462265196989012139;
  LW2_1 = [5.7837705565909036665 -4.1006150540539634264 4.5812626712902524417];
  
  % ===== SIMULATION ========
  
  % Format Input Arguments
  isCellX = iscell(X);
  if ~isCellX, X = {X}; end;
  
  % Dimensions
  TS = size(X,2); % timesteps
  if ~isempty(X)
    Q = size(X{1},2); % samples/series
  else
    Q = 0;
  end
  
  % Allocate Outputs
  Y = cell(1,TS);
  
  % Time loop
  for ts=1:TS
  
    % Input 1
    Xp1 = mapminmax_apply(X{1,ts},x1_step1_gain,x1_step1_xoffset,x1_step1_ymin);
    
    % Layer 1
    a1 = tansig_apply(repmat(b1,1,Q) + IW1_1*Xp1);
    
    % Layer 2
    a2 = logsig_apply(repmat(b2,1,Q) + LW2_1*a1);
    
    % Output 1
    Y{1,ts} = a2;
  end
  
  % Final Delay States
  Xf = cell(1,0);
  Af = cell(2,0);
  
  % Format Output Arguments
  if ~isCellX, Y = cell2mat(Y); end
end

% ===== MODULE FUNCTIONS ========

% Map Minimum and Maximum Input Processing Function
function y = mapminmax_apply(x,settings_gain,settings_xoffset,settings_ymin)
  y = bsxfun(@minus,x,settings_xoffset);
  y = bsxfun(@times,y,settings_gain);
  y = bsxfun(@plus,y,settings_ymin);
end

% Sigmoid Positive Transfer Function
function a = logsig_apply(n)
  a = 1 ./ (1 + exp(-n));
end

% Sigmoid Symmetric Transfer Function
function a = tansig_apply(n)
  a = 2 ./ (1 + exp(-2*n)) - 1;
end

function [Y,Xf,Af] = maizeSeedling_func3(X,~,~)
%MAIZESEEDLING_FUNC3 neural network simulation function.
%
% Generated by Neural Network Toolbox function genFunction, 18-Jul-2017 20:42:20.
% 
% [Y] = maizeSeedling_func3(X,~,~) takes these arguments:
% 
%   X = 1xTS cell, 1 inputs over TS timsteps
%   Each X{1,ts} = 2xQ matrix, input #1 at timestep ts.
% 
% and returns:
%   Y = 1xTS cell of 1 outputs over TS timesteps.
%   Each Y{1,ts} = 1xQ matrix, output #1 at timestep ts.
% 
% where Q is number of samples (or series) and TS is the number of timesteps.

%#ok<*RPMT0>

  % ===== NEURAL NETWORK CONSTANTS =====
  
  % Input 1
  x1_step1_xoffset = [-1575.45759246424;-1465.62946516086];
  x1_step1_gain = [0.000295798191980661;0.000653897595197155];
  x1_step1_ymin = -1;
  
  % Layer 1
  b1 = [-4.5238504993506882812;-3.4519583322600380093;-2.525539952327806148;0.84486324888893582497;0.19974495329875355254;0.13063788951719618181;1.2407668044678357155;-3.0241182350356377029;3.0107123694996431595;5.0386400373381974305];
  IW1_1 = [2.3203826852916940027 3.6558679285935071768;2.759939426307390864 -3.4443855722964498156;4.0610042186296135824 -1.7193559785194019174;-3.6407722704253120405 3.0785834452769607061;-4.3741773791784241965 -1.0683839440389863995;4.3019800640020555704 -1.5671006400212212917;3.4656135010799915541 -4.949588156945947226;-1.5805574365429182482 3.9877302159921756974;3.926198657730579189 -2.4828141701819657072;0.57463991783865508989 3.873438809154044371];
  
  % Layer 2
  b2 = -0.79738542568924164478;
  LW2_1 = [-0.37467471853641493018 -0.58005212561666585902 -0.042113862140873897788 -0.36130196786475815562 -2.6096123245201900964 3.436928887248712261 4.1390947669513682428 1.4915523474316352281 0.35974719921982845072 -0.88693725368240394769];
  
  % ===== SIMULATION ========
  
  % Format Input Arguments
  isCellX = iscell(X);
  if ~isCellX, X = {X}; end;
  
  % Dimensions
  TS = size(X,2); % timesteps
  if ~isempty(X)
    Q = size(X{1},2); % samples/series
  else
    Q = 0;
  end
  
  % Allocate Outputs
  Y = cell(1,TS);
  
  % Time loop
  for ts=1:TS
  
    % Input 1
    Xp1 = mapminmax_apply(X{1,ts},x1_step1_gain,x1_step1_xoffset,x1_step1_ymin);
    
    % Layer 1
    a1 = tansig_apply(repmat(b1,1,Q) + IW1_1*Xp1);
    
    % Layer 2
    a2 = logsig_apply(repmat(b2,1,Q) + LW2_1*a1);
    
    % Output 1
    Y{1,ts} = a2;
  end
  
  % Final Delay States
  Xf = cell(1,0);
  Af = cell(2,0);
  
  % Format Output Arguments
  if ~isCellX, Y = cell2mat(Y); end
end

% ===== MODULE FUNCTIONS ========

% Map Minimum and Maximum Input Processing Function
function y = mapminmax_apply(x,settings_gain,settings_xoffset,settings_ymin)
  y = bsxfun(@minus,x,settings_xoffset);
  y = bsxfun(@times,y,settings_gain);
  y = bsxfun(@plus,y,settings_ymin);
end

% Sigmoid Positive Transfer Function
function a = logsig_apply(n)
  a = 1 ./ (1 + exp(-n));
end

% Sigmoid Symmetric Transfer Function
function a = tansig_apply(n)
  a = 2 ./ (1 + exp(-2*n)) - 1;
end

function [Y,Xf,Af] = fftNN4(X,~,~)
%FFTNN4 neural network simulation function.
%
% Generated by Neural Network Toolbox function genFunction, 22-Mar-2017 09:01:10.
% 
% [Y] = fftNN4(X,~,~) takes these arguments:
% 
%   X = 1xTS cell, 1 inputs over TS timesteps
%   Each X{1,ts} = 6xQ matrix, input #1 at timestep ts.
% 
% and returns:
%   Y = 1xTS cell of 1 outputs over TS timesteps.
%   Each Y{1,ts} = 3xQ matrix, output #1 at timestep ts.
% 
% where Q is number of samples (or series) and TS is the number of timesteps.

%#ok<*RPMT0>

% ===== NEURAL NETWORK CONSTANTS =====

% Input 1
x1_step1.xoffset = [-0.747006382377768;-0.697742834656545;-0.490797845384199;-49.0053039056943;-64.3612323214914;-54.4179107076702];
x1_step1.gain = [1.20478154368001;1.48846702877638;2.11403974925536;0.0124437578985053;0.0144281183648748;0.0162992707192427];
x1_step1.ymin = -1;

% Layer 1
b1 = [-2.2546320372813140054;-2.0256383491376230843;-1.914362154408499217;-1.2473498059380718761;1.2942653547983107298;-1.2303207501362838361;-0.90903180994861931818;0.46625466632141943091;-0.49677242187257431016;-0.178651291807941065;-0.28706974812926217;0.49786805660109828553;-0.47906329266007974255;-0.95448208596870465215;-1.0300833036043188784;-1.4736711224084979577;-1.4484534360486338578;-1.9563100356621827558;-1.7572927576546075734;1.682261546865537083];
IW1_1 = [0.98913325523785444737 0.62455638260093493397 1.0684946478623276178 0.71389249419978351163 2.4509518656228239664 0.51560151608099857867;2.0145704400544244272 -3.5313549727286002167 2.0457307043125618762 -0.31602110206952160887 -0.056082844874597893858 -0.99323490009396375733;1.2854160719418532555 0.20213429977855848496 -0.86584221874609534897 -0.51799823608800310559 -0.46359234795604886692 2.1042285342337767595;2.4607251209984486451 0.25148370273848197343 0.20387067486498761104 -0.91139988078261580107 -0.22655411140509226775 -0.26918069074085426706;-1.7772619526997812667 0.9746460463789169415 3.268667167150361319 -0.015999573624307122932 1.0911009559955555659 -0.65116675393094247681;0.78251363398577000741 0.066456386334147729555 -0.88868030421095989269 -0.067700287015996216122 0.98112174333569734941 0.47957858843446443675;-0.13389673981532940195 2.1499210311896854719 -1.3720987845319629894 0.61137811561423638373 7.3133241213153352689 1.6331049166909705761;0.24281686210883537957 -2.3509247364942256198 -0.32572918758038715836 0.75240753448227126743 0.21548538288996416101 1.0616468838471391223;2.3415706172577142041 -0.7922264565960124294 -0.63500347096959663951 -1.0538031711516191447 0.85145267910396005284 0.30856838668243002921;1.2658145716021458327 0.94889407161129923907 0.85415014663196986433 -1.112011882889682779 1.3452881715662357021 0.25923665210520929758;-0.59894007358972367605 -2.0336086741686019153 -0.67075847451360970375 0.07013078155935370539 -0.041276571913636740663 0.050247482737111638651;0.86031411885004938078 -0.70420729471039533731 0.33866768635074223637 0.886440557791825956 0.68651803906770403341 -1.3861579292478574121;-2.2091861475874057241 1.9077782483763414678 -1.3332050069261327518 0.69419870058102450816 -0.61442765492588513609 -0.24568185355767688249;0.11085074584303786227 -0.70255741895548373677 -1.4583063894854000342 0.49308020224130405529 3.1283238011268932333 1.0263110566955997438;-0.4537867419403985858 -0.72915864475374614351 -0.20010511724256693777 -0.48393271988159147767 1.2731523957449073503 0.25560406247756783937;-0.47755417669676564207 0.48872694173854136501 -0.46671999550569653881 1.3744647268440228771 0.3463799664943934542 -0.1606616105278881601;-2.257072666373311165 -1.1739400661612415799 3.3183100916109817824 -1.1635781493489860683 0.62335311602905940642 -0.68809236766064474367;0.54963165978768457887 -0.78576954623421280122 -1.6651501730749860286 -1.0881442216237451337 1.7171346473274755606 -0.045208057697198163194;-3.7496998834452752725 0.31644551059601350174 2.7374153000594279028 -0.91612793706266781868 1.3213441142140986972 0.25035405651198361365;-0.80072572300984679039 0.56644139133208537551 -2.2348520018271789134 1.4463045594612351508 0.84250721107153769829 1.1191328059579050969];

% Layer 2
b2 = [0.99814656447285943219;0.81484034993004617053;-0.6233237085885401374];
LW2_1 = [-0.019317799960806871645 0.87809797601077632656 -0.1711413828263908532 -0.71443037508831186422 0.83844085990109507023 -0.92351636980897255924 0.55187288344335150292 -0.61974118453709026166 -1.3902856209666401011 0.55486162733181187967 -0.32547674348601074445 -0.47294862152030658908 0.87685303473477937963 0.07086407668871194665 0.16828541066046398544 -1.0094935886956766247 0.27654211177094811802 -0.98010171398501622075 0.32081911188778516886 -0.087407473077162053943;-0.29928776419303304568 0.046162025439949079531 0.61886201025941711684 -0.75362023942900591145 0.48318947182127253148 0.16664988013554604684 -0.11858825893840946319 -0.089966285321998490376 -0.2405756284477897633 0.69154966412871921033 -0.18885544795367642523 -0.27038592601367611445 0.07261097045730943722 0.73715691089721213647 0.35027035312535387268 0.97044855336282176417 -0.28421199695735804847 0.14097085286031710294 -0.89839536968876054779 -0.3696826717973835108;0.13171505826987242593 0.39819978897836560972 -0.54768667880339905185 0.62896743915707442607 -0.2207627271963001625 0.72273339131165847959 -0.19807086232518569813 0.2297287071054301133 0.50954506781891206746 0.44794929309571923648 0.36947498890247881809 -0.063353012612494846723 0.63683431075501750751 0.9405767897549982548 0.27586833576921576672 0.83383342459385589862 -0.33138121077360527256 0.24702310361874779687 -0.66230338924661191768 0.90602825554251331663];

% ===== SIMULATION ========

% Format Input Arguments
isCellX = iscell(X);
if ~isCellX, X = {X}; end;

% Dimensions
TS = size(X,2); % timesteps
if ~isempty(X)
  Q = size(X{1},2); % samples/series
else
  Q = 0;
end

% Allocate Outputs
Y = cell(1,TS);

% Time loop
for ts=1:TS

    % Input 1
    Xp1 = mapminmax_apply(X{1,ts},x1_step1);
    
    % Layer 1
    a1 = tansig_apply(repmat(b1,1,Q) + IW1_1*Xp1);
    
    % Layer 2
    a2 = softmax_apply(repmat(b2,1,Q) + LW2_1*a1);
    
    % Output 1
    Y{1,ts} = a2;
end

% Final Delay States
Xf = cell(1,0);
Af = cell(2,0);

% Format Output Arguments
if ~isCellX, Y = cell2mat(Y); end
end

% ===== MODULE FUNCTIONS ========

% Map Minimum and Maximum Input Processing Function
function y = mapminmax_apply(x,settings)
  y = bsxfun(@minus,x,settings.xoffset);
  y = bsxfun(@times,y,settings.gain);
  y = bsxfun(@plus,y,settings.ymin);
end

% Competitive Soft Transfer Function
function a = softmax_apply(n,~)
  if isa(n,'gpuArray')
    a = iSoftmaxApplyGPU(n);
  else
    a = iSoftmaxApplyCPU(n);
  end
end
function a = iSoftmaxApplyCPU(n)
  nmax = max(n,[],1);
  n = bsxfun(@minus,n,nmax);
  numerator = exp(n);
  denominator = sum(numerator,1); 
  denominator(denominator == 0) = 1;
  a = bsxfun(@rdivide,numerator,denominator);
end
function a = iSoftmaxApplyGPU(n)
  nmax = max(n,[],1);
  numerator = arrayfun(@iSoftmaxApplyGPUHelper1,n,nmax);
  denominator = sum(numerator,1);
  a = arrayfun(@iSoftmaxApplyGPUHelper2,numerator,denominator);
end
function numerator = iSoftmaxApplyGPUHelper1(n,nmax)
  numerator = exp(n - nmax);
end
function a = iSoftmaxApplyGPUHelper2(numerator,denominator)
  if (denominator == 0)
    a = numerator;
  else
    a = numerator ./ denominator;
  end
end

% Sigmoid Symmetric Transfer Function
function a = tansig_apply(n,~)
  a = 2 ./ (1 + exp(-2*n)) - 1;
end
